type Dict = {
    a: 'A';
    b: 'B';
    c: 'C';
    d: 'D';
    e: 'E';
    f: 'F';
    g: 'G';
    h: 'H';
    i: 'I';
    j: 'J';
    k: 'K';
    l: 'L';
    n: 'N';
    m: 'M';
    o: 'O';
    p: 'P';
    q: 'Q';
    r: 'R';
    s: 'S';
    t: 'T';
    u: 'U';
    v: 'V';
    w: 'W';
    x: 'X';
    y: 'Y';
    z: 'Z';
};
type MyCapitalize<S extends string> =
    // S extends `${infer F}${infer P}` ? (F extends keyof Dict ? `${Dict[F]}${P}` : S) : S;
    S extends `${infer F}${infer P}` ? `${Uppercase<F>}${P}` : S;
